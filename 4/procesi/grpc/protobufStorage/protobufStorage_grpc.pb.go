// prevajanje datoteke *.proto na Arnes HPC:
//   - namestitev modulov
//      module load protobuf
//      module load binutils/2.39-GCCcore-12.2.0
//      go install google.golang.org/protobuf/cmd/protoc-gen-go@latest (samo ob prvi uporabi)
//      go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest (samo ob prvi uporabi)
//      export PATH="$PATH:$(go env GOPATH)/bin"
//   - prevajanje
//      srun protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative protobufStorage.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0
// source: protobufStorage.proto

package protobufStorage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PGC_Get_FullMethodName    = "/protobufStorage.PGC/Get"
	PGC_Put_FullMethodName    = "/protobufStorage.PGC/Put"
	PGC_Commit_FullMethodName = "/protobufStorage.PGC/Commit"
)

// PGCClient is the client API for PGC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PGCClient interface {
	Get(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*TodoStorage, error)
	Put(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*StatusResponse, error)
	Commit(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*StatusResponse, error)
}

type pGCClient struct {
	cc grpc.ClientConnInterface
}

func NewPGCClient(cc grpc.ClientConnInterface) PGCClient {
	return &pGCClient{cc}
}

func (c *pGCClient) Get(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*TodoStorage, error) {
	out := new(TodoStorage)
	err := c.cc.Invoke(ctx, PGC_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pGCClient) Put(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, PGC_Put_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pGCClient) Commit(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, PGC_Commit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PGCServer is the server API for PGC service.
// All implementations must embed UnimplementedPGCServer
// for forward compatibility
type PGCServer interface {
	Get(context.Context, *Todo) (*TodoStorage, error)
	Put(context.Context, *Todo) (*StatusResponse, error)
	Commit(context.Context, *Todo) (*StatusResponse, error)
	mustEmbedUnimplementedPGCServer()
}

// UnimplementedPGCServer must be embedded to have forward compatible implementations.
type UnimplementedPGCServer struct {
}

func (UnimplementedPGCServer) Get(context.Context, *Todo) (*TodoStorage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPGCServer) Put(context.Context, *Todo) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedPGCServer) Commit(context.Context, *Todo) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedPGCServer) mustEmbedUnimplementedPGCServer() {}

// UnsafePGCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PGCServer will
// result in compilation errors.
type UnsafePGCServer interface {
	mustEmbedUnimplementedPGCServer()
}

func RegisterPGCServer(s grpc.ServiceRegistrar, srv PGCServer) {
	s.RegisterService(&PGC_ServiceDesc, srv)
}

func _PGC_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Todo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PGCServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PGC_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PGCServer).Get(ctx, req.(*Todo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PGC_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Todo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PGCServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PGC_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PGCServer).Put(ctx, req.(*Todo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PGC_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Todo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PGCServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PGC_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PGCServer).Commit(ctx, req.(*Todo))
	}
	return interceptor(ctx, in, info, handler)
}

// PGC_ServiceDesc is the grpc.ServiceDesc for PGC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PGC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobufStorage.PGC",
	HandlerType: (*PGCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _PGC_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _PGC_Put_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _PGC_Commit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobufStorage.proto",
}
